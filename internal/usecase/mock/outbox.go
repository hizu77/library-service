// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hizu77/library-service/internal/infra/repository (interfaces: OutboxRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../usecase/mock/outbox.go -package=mock github.com/hizu77/library-service/internal/infra/repository OutboxRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	outbox "github.com/hizu77/library-service/internal/infra/model/outbox"
	gomock "go.uber.org/mock/gomock"
)

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockOutboxRepository) GetMessages(ctx context.Context, batchSize int, inProgressTTL time.Duration) ([]outbox.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, batchSize, inProgressTTL)
	ret0, _ := ret[0].([]outbox.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockOutboxRepositoryMockRecorder) GetMessages(ctx, batchSize, inProgressTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockOutboxRepository)(nil).GetMessages), ctx, batchSize, inProgressTTL)
}

// MarkMessageAsProcessed mocks base method.
func (m *MockOutboxRepository) MarkMessageAsProcessed(ctx context.Context, idKeys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageAsProcessed", ctx, idKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageAsProcessed indicates an expected call of MarkMessageAsProcessed.
func (mr *MockOutboxRepositoryMockRecorder) MarkMessageAsProcessed(ctx, idKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageAsProcessed", reflect.TypeOf((*MockOutboxRepository)(nil).MarkMessageAsProcessed), ctx, idKeys)
}

// SendMessage mocks base method.
func (m *MockOutboxRepository) SendMessage(ctx context.Context, idKey string, kind outbox.Kind, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, idKey, kind, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockOutboxRepositoryMockRecorder) SendMessage(ctx, idKey, kind, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockOutboxRepository)(nil).SendMessage), ctx, idKey, kind, msg)
}
