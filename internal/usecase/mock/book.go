// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hizu77/library-service/internal/repository (interfaces: BookRepository)
//
// Generated by this command:
//
//	mockgen -destination=../usecase/mock/book.go -package=mock github.com/hizu77/library-service/internal/repository BookRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/hizu77/library-service/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
	isgomock struct{}
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBookRepository) AddBook(ctx context.Context, book entity.Book) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, book)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBookRepositoryMockRecorder) AddBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookRepository)(nil).AddBook), ctx, book)
}

// GetBook mocks base method.
func (m *MockBookRepository) GetBook(ctx context.Context, id string) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, id)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookRepositoryMockRecorder) GetBook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookRepository)(nil).GetBook), ctx, id)
}

// GetBooksByAuthorID mocks base method.
func (m *MockBookRepository) GetBooksByAuthorID(ctx context.Context, authorID string) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByAuthorID", ctx, authorID)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByAuthorID indicates an expected call of GetBooksByAuthorID.
func (mr *MockBookRepositoryMockRecorder) GetBooksByAuthorID(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByAuthorID", reflect.TypeOf((*MockBookRepository)(nil).GetBooksByAuthorID), ctx, authorID)
}

// UpdateBook mocks base method.
func (m *MockBookRepository) UpdateBook(ctx context.Context, book entity.Book) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, book)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepositoryMockRecorder) UpdateBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), ctx, book)
}
